from fastapi import APIRouter, Depends, HTTPException, status, Query, UploadFile, File
from fastapi.security import HTTPBearer
from fastapi.responses import FileResponse
from sqlalchemy.orm import Session
from typing import List, Optional
from datetime import datetime, date
from app.database import get_db
from app.auth.auth_handler import JWTBearer, get_current_user
from app.controllers.reporte_controller import ReporteController
from app.schemas.reporte import (
    ReporteCreate, ReporteUpdate, ReporteResponse, ReporteSimple,
    CambiarEstadoReporte, AprobacionCliente, FirmaReporte,
    EstadisticasReportes, FiltrosReporte, ReportesPaginados,
    TemplateReporte, TipoReporte
)
from app.schemas.user import UserCurrent

router = APIRouter(
    prefix="/api/v1/reportes",
    tags=["Reportes"],
    dependencies=[Depends(HTTPBearer())]
)

# üìù CREAR REPORTE
@router.post("/", response_model=ReporteResponse, status_code=status.HTTP_201_CREATED)
async def crear_reporte(
    reporte_data: ReporteCreate,
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Crear un nuevo reporte de servicio.
    
    - **automovil_id**: ID del autom√≥vil al que se asocia el reporte
    - **proceso_id**: ID del proceso/servicio realizado (opcional)
    - **tipo**: Tipo de reporte (INICIAL, FINAL, DIAGNOSTICO, etc.)
    - **titulo**: T√≠tulo descriptivo del reporte
    - **descripcion**: Descripci√≥n detallada del trabajo realizado
    - **observaciones**: Observaciones adicionales del t√©cnico
    - **repuestos_utilizados**: Lista de repuestos utilizados
    - **estado**: Estado del reporte (BORRADOR, EN_REVISION, APROBADO, etc.)
    """
    try:
        controller = ReporteController()
        return await controller.crear_reporte(db, reporte_data, current_user.id)
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# üìã LISTAR REPORTES CON FILTROS Y PAGINACI√ìN
@router.get("/", response_model=ReportesPaginados)
async def listar_reportes(
    page: int = Query(1, ge=1, description="N√∫mero de p√°gina"),
    limit: int = Query(10, ge=1, le=100, description="Elementos por p√°gina"),
    automovil_id: Optional[int] = Query(None, description="Filtrar por autom√≥vil"),
    proceso_id: Optional[int] = Query(None, description="Filtrar por proceso"),
    tipo: Optional[TipoReporte] = Query(None, description="Filtrar por tipo de reporte"),
    estado: Optional[str] = Query(None, description="Filtrar por estado"),
    fecha_inicio: Optional[date] = Query(None, description="Fecha inicio (YYYY-MM-DD)"),
    fecha_fin: Optional[date] = Query(None, description="Fecha fin (YYYY-MM-DD)"),
    tecnico_id: Optional[int] = Query(None, description="Filtrar por t√©cnico"),
    cliente_id: Optional[int] = Query(None, description="Filtrar por cliente"),
    search: Optional[str] = Query(None, description="B√∫squeda en t√≠tulo y descripci√≥n"),
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Listar reportes con filtros avanzados y paginaci√≥n.
    
    Filtros disponibles:
    - Por autom√≥vil, proceso, tipo, estado
    - Por rango de fechas
    - Por t√©cnico o cliente
    - B√∫squeda de texto en t√≠tulo y descripci√≥n
    """
    try:
        controller = ReporteController()
        filtros = FiltrosReporte(
            automovil_id=automovil_id,
            proceso_id=proceso_id,
            tipo=tipo,
            estado=estado,
            fecha_inicio=fecha_inicio,
            fecha_fin=fecha_fin,
            tecnico_id=tecnico_id,
            cliente_id=cliente_id,
            search=search
        )
        return await controller.listar_reportes(db, filtros, page, limit, current_user)
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# üîç OBTENER REPORTE POR ID
@router.get("/{reporte_id}", response_model=ReporteResponse)
async def obtener_reporte(
    reporte_id: int,
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Obtener detalles completos de un reporte espec√≠fico.
    """
    try:
        controller = ReporteController()
        return await controller.obtener_reporte(db, reporte_id, current_user)
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# ‚úèÔ∏è ACTUALIZAR REPORTE
@router.put("/{reporte_id}", response_model=ReporteResponse)
async def actualizar_reporte(
    reporte_id: int,
    reporte_data: ReporteUpdate,
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Actualizar un reporte existente.
    Solo se pueden actualizar reportes en estado BORRADOR o EN_REVISION.
    """
    try:
        controller = ReporteController()
        return await controller.actualizar_reporte(db, reporte_id, reporte_data, current_user.id)
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    except PermissionError as e:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# üóëÔ∏è ELIMINAR REPORTE
@router.delete("/{reporte_id}")
async def eliminar_reporte(
    reporte_id: int,
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Eliminar un reporte.
    Solo administradores pueden eliminar reportes, y solo en estado BORRADOR.
    """
    try:
        controller = ReporteController()
        await controller.eliminar_reporte(db, reporte_id, current_user.id)
        return {"message": "Reporte eliminado exitosamente"}
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=str(e))
    except PermissionError as e:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# üîÑ CAMBIAR ESTADO DEL REPORTE
@router.patch("/{reporte_id}/estado", response_model=ReporteResponse)
async def cambiar_estado_reporte(
    reporte_id: int,
    estado_data: CambiarEstadoReporte,
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Cambiar el estado de un reporte.
    
    Estados disponibles:
    - BORRADOR: En creaci√≥n
    - EN_REVISION: Enviado para revisi√≥n
    - APROBADO: Aprobado por supervisor
    - RECHAZADO: Rechazado, requiere correcciones
    - FINALIZADO: Proceso completado
    - CLIENTE_APROBADO: Cliente ha visto y aprobado
    """
    try:
        controller = ReporteController()
        return await controller.cambiar_estado_reporte(db, reporte_id, estado_data, current_user.id)
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    except PermissionError as e:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# ‚úÖ APROBACI√ìN DEL CLIENTE
@router.post("/{reporte_id}/aprobacion-cliente", response_model=ReporteResponse)
async def aprobacion_cliente(
    reporte_id: int,
    aprobacion_data: AprobacionCliente,
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Registrar la aprobaci√≥n del cliente para un reporte.
    Solo el cliente propietario del veh√≠culo puede aprobar.
    """
    try:
        controller = ReporteController()
        return await controller.aprobacion_cliente(db, reporte_id, aprobacion_data, current_user.id)
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    except PermissionError as e:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# ‚úçÔ∏è FIRMAR REPORTE
@router.post("/{reporte_id}/firmar")
async def firmar_reporte(
    reporte_id: int,
    firma_data: FirmaReporte,
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Aplicar firma digital al reporte.
    Puede ser firmado por t√©cnico, supervisor o cliente.
    """
    try:
        controller = ReporteController()
        return await controller.firmar_reporte(db, reporte_id, firma_data, current_user.id)
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    except PermissionError as e:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# üìä ESTAD√çSTICAS DE REPORTES
@router.get("/estadisticas/resumen", response_model=EstadisticasReportes)
async def obtener_estadisticas_reportes(
    fecha_inicio: Optional[date] = Query(None, description="Fecha inicio para estad√≠sticas"),
    fecha_fin: Optional[date] = Query(None, description="Fecha fin para estad√≠sticas"),
    tecnico_id: Optional[int] = Query(None, description="Estad√≠sticas por t√©cnico"),
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Obtener estad√≠sticas generales de reportes.
    Incluye conteos por estado, tipo, t√©cnico, etc.
    """
    try:
        controller = ReporteController()
        return await controller.obtener_estadisticas_reportes(db, fecha_inicio, fecha_fin, tecnico_id, current_user)
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# üöó REPORTES POR AUTOM√ìVIL
@router.get("/automovil/{automovil_id}", response_model=List[ReporteSimple])
async def reportes_por_automovil(
    automovil_id: int,
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Obtener todos los reportes asociados a un autom√≥vil espec√≠fico.
    √ötil para el historial completo del veh√≠culo.
    """
    try:
        controller = ReporteController()
        return await controller.reportes_por_automovil(db, automovil_id, current_user)
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# üè∑Ô∏è PLANTILLAS DE REPORTES
@router.get("/plantillas/tipos", response_model=List[TemplateReporte])
async def obtener_plantillas_reportes(
    tipo: Optional[TipoReporte] = Query(None, description="Filtrar plantillas por tipo"),
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Obtener plantillas predefinidas para diferentes tipos de reportes.
    Facilita la creaci√≥n estandarizada de reportes.
    """
    try:
        controller = ReporteController()
        return await controller.obtener_plantillas_reportes(db, tipo, current_user)
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# üìé SUBIR ADJUNTOS AL REPORTE
@router.post("/{reporte_id}/adjuntos")
async def subir_adjunto_reporte(
    reporte_id: int,
    file: UploadFile = File(...),
    descripcion: Optional[str] = None,
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Subir archivos adjuntos a un reporte (im√°genes, documentos, etc.).
    Tipos permitidos: jpg, png, pdf, doc, docx.
    """
    try:
        controller = ReporteController()
        return await controller.subir_adjunto_reporte(db, reporte_id, file, descripcion, current_user.id)
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# üì• EXPORTAR REPORTE
@router.get("/{reporte_id}/exportar")
async def exportar_reporte(
    reporte_id: int,
    formato: str = Query("pdf", regex="^(pdf|excel|word)$", description="Formato de exportaci√≥n"),
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Exportar reporte en diferentes formatos (PDF, Excel, Word).
    Genera documento profesional con toda la informaci√≥n del reporte.
    """
    try:
        controller = ReporteController()
        file_path = await controller.exportar_reporte(db, reporte_id, formato, current_user)
        
        # Configurar headers para descarga
        filename = f"reporte_{reporte_id}.{formato}"
        media_type = {
            "pdf": "application/pdf",
            "excel": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            "word": "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        }.get(formato, "application/octet-stream")
        
        return FileResponse(
            path=file_path,
            filename=filename,
            media_type=media_type,
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# üìã DUPLICAR REPORTE
@router.post("/{reporte_id}/duplicar", response_model=ReporteResponse, status_code=status.HTTP_201_CREATED)
async def duplicar_reporte(
    reporte_id: int,
    automovil_id: Optional[int] = None,
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Crear una copia de un reporte existente.
    √ötil para servicios similares o mantenimientos regulares.
    """
    try:
        controller = ReporteController()
        return await controller.duplicar_reporte(db, reporte_id, automovil_id, current_user.id)
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# üìà REPORTES PENDIENTES
@router.get("/pendientes/revision", response_model=List[ReporteSimple])
async def reportes_pendientes_revision(
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Obtener reportes pendientes de revisi√≥n.
    Solo para supervisores y administradores.
    """
    try:
        controller = ReporteController()
        return await controller.reportes_pendientes_revision(db, current_user)
    except PermissionError as e:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# üîî NOTIFICAR CLIENTE
@router.post("/{reporte_id}/notificar-cliente")
async def notificar_cliente_reporte(
    reporte_id: int,
    mensaje_personalizado: Optional[str] = None,
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Enviar notificaci√≥n al cliente sobre el reporte.
    Incluye enlace para visualizar y aprobar el reporte.
    """
    try:
        controller = ReporteController()
        return await controller.notificar_cliente_reporte(db, reporte_id, mensaje_personalizado, current_user.id)
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# üìù COMENTARIOS EN REPORTE
@router.post("/{reporte_id}/comentarios")
async def agregar_comentario_reporte(
    reporte_id: int,
    comentario: str,
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Agregar comentario a un reporte.
    Permite comunicaci√≥n entre t√©cnicos, supervisores y clientes.
    """
    try:
        controller = ReporteController()
        return await controller.agregar_comentario_reporte(db, reporte_id, comentario, current_user.id)
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")

# üè∑Ô∏è ETIQUETAS DE REPORTE
@router.post("/{reporte_id}/etiquetas")
async def gestionar_etiquetas_reporte(
    reporte_id: int,
    etiquetas: List[str],
    accion: str = Query("agregar", regex="^(agregar|quitar|reemplazar)$"),
    db: Session = Depends(get_db),
    current_user: UserCurrent = Depends(get_current_user)
):
    """
    Gestionar etiquetas de un reporte para mejor categorizaci√≥n.
    Acciones: agregar, quitar, reemplazar etiquetas.
    """
    try:
        controller = ReporteController()
        return await controller.gestionar_etiquetas_reporte(db, reporte_id, etiquetas, accion, current_user.id)
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno: {str(e)}")